package com.nordnet.zabuza.domain.model;

import static com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty;
import static javax.persistence.FetchType.EAGER;
import static javax.persistence.GenerationType.IDENTITY;

import java.util.List;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Table;

import org.slf4j.LoggerFactory;

import com.nordnet.common.valueObject.identifier.Identifier;

/**
 * Query.
 *
 * this class is auto generated by the com.nordnet.common project : entities-maven-plugin, do not edit this class
 * directly, all change will be lost on next build ...
 *
 * @author MMORTIER, Equipe OTS
 *
 */
@Entity
@Table(name = "query")
public class Query implements Comparable<Query> {

	/** identifier. */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", columnDefinition = "int(11)", nullable = false)
	protected Long id;

	/** {@link String} identifier. */
	@Embedded
	protected final Identifier identifier;

	/** {@link String} sql. */
	@Column(name = "sql_query")
	protected final String sql;

	/** {@link List<String>} result. */
	@ElementCollection(fetch = EAGER)
	@CollectionTable(name = "query_result", joinColumns = @JoinColumn(name = "query_idFk"))
	protected final List<String> result;

	/**
	 * default deprecated Constructor.
	 *
	 * @deprecated
	 */
	@Deprecated
	protected Query() {
		identifier = null;
		sql = null;
		result = null;
	}

	/**
	 * Constructor.
	 *
	 * @param builder
	 *            the {@link Builder} to use.
	 */
	protected Query(final Builder builder) {
		identifier = builder.identifier;
		sql = builder.sql;
		result = builder.result;

		// check parameters
		checkNotNullOrEmpty("identifier", identifier);
		checkNotNullOrEmpty("sql", sql);
		checkNotNullOrEmpty("result", result);
	}

	/**
	 * builder of {@link Query}.
	 *
	 * @return new {@link Builder} for {@link Query}
	 */
	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder for {@link Query}.
	 *
	 * @author MMORTIER, Equipe OTS
	 *
	 */
	public static class Builder {

		/** {@link Identifier} identifier. */
		protected Identifier identifier;

		/** {@link String} sql. */
		protected String sql;

		/** {@link List<String>} result. */
		protected List<String> result;

		/** default protected Constructor. */
		protected Builder() {
			super();
		}

		/**
		 * Setter of identifier.
		 *
		 * @param identifier
		 *            {@link Identifier} the identifier to set.
		 * @return this {@link Builder}
		 */
		public Builder identifier(final Identifier identifier) {
			this.identifier = identifier;
			return this;
		}

		/**
		 * Setter of sql.
		 *
		 * @param sql
		 *            {@link String} the sql to set.
		 * @return this {@link Builder}
		 */
		public Builder sql(final String sql) {
			this.sql = sql;
			return this;
		}

		/**
		 * Setter of result.
		 *
		 * @param result
		 *            {@link List<String>} the result to set.
		 * @return this {@link Builder}
		 */
		public Builder result(final List<String> result) {
			this.result = result;
			return this;
		}

		/**
		 * build new {@link Query}.
		 *
		 * @return new {@link Query} from this {@link Builder}
		 */
		public Query build() {
			return new Query(this);
		}

	}

	/**
	 * Getter of sql.
	 *
	 * @return {@link String} the sql
	 */
	public String getSql() {
		return sql;
	}

	/**
	 * Getter of result.
	 *
	 * @return {@link List<String>} the result
	 */
	public List<String> getResult() {
		return result;
	}

	/**
	 * Getter of identifier.
	 *
	 * @return {@link Identifier} the identifier
	 */
	public Identifier getIdentifier() {
		return identifier;
	}

	@Override
	public boolean equals(final Object obj) {
		if (!(obj instanceof Query)) {
			return false;
		}
		Query query = (Query) obj;
		return com.nordnet.common.valueObject.utils.Equals.TRUE.andEquals(getSql(), query.getSql())
				.andEquals(getResult(), query.getResult()).andEquals(getIdentifier(), query.getIdentifier()).isEquals();
	}

	@Override
	public int hashCode() {
		return new com.nordnet.common.valueObject.utils.HashCode(null).append(getIdentifier()).append(getSql())
				.append(getResult()).hashCode();
	}

	@Override
	public String toString() {
		try {
			return com.nordnet.common.valueObject.utils.JSon.toPrettyJson(this);
		} catch (com.fasterxml.jackson.core.JsonProcessingException jpe) {
			LoggerFactory.getLogger(Query.class).error("error with toString", jpe);
			return super.toString();
		}
	}

	@Override
	public int compareTo(final Query o) {
		return new com.nordnet.common.valueObject.utils.Compare(true, true)
				.andCompare(getIdentifier(), o.getIdentifier()).andCompare(getSql(), o.getSql())
				.andCompare(getResult(), o.getResult()).compare();
	}

}
