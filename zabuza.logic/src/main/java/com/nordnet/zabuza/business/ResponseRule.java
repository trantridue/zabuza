package com.nordnet.zabuza.business;

import static com.nordnet.zabuza.domain.model.constants.Level.OK;

import java.util.List;
import java.util.Map;

import org.slf4j.LoggerFactory;

import com.nordnet.zabuza.domain.model.Rule;
import com.nordnet.zabuza.domain.model.constants.Level;

/**
 * ResponseRule.
 *
 * this class is auto generated by the com.nordnet.common project : entities-maven-plugin, do not edit this class
 * directly, all change will be lost on next build ...
 *
 * @author MMORTIER, Equipe OTS
 *
 */
public class ResponseRule implements Comparable<ResponseRule> {

	/** {@link Rule} rule. */
	protected final Rule rule;

	/** {@link List<Map<String,String>>} unmatchedRuleDetail. */
	protected final List<Map<String, String>> unmatchedRuleDetail;

	/** {@link List<Map<String,String>>} results. */
	protected final List<Map<String, String>> results;

	/** {@link ResponseRule} parentResponse. */
	protected final ResponseRule parentResponse;

	/**
	 * default deprecated Constructor.
	 *
	 * @deprecated
	 */
	@Deprecated
	protected ResponseRule() {
		rule = null;
		unmatchedRuleDetail = null;
		results = null;
		parentResponse = null;
	}

	/**
	 * Constructor.
	 *
	 * @param builder
	 *            the {@link Builder} to use.
	 */
	protected ResponseRule(final Builder builder) {
		rule = builder.rule;
		unmatchedRuleDetail = builder.unmatchedRuleDetail;
		results = builder.results;
		parentResponse = builder.parentResponse;

		// check parameters
	}

	/**
	 * builder of {@link ResponseRule}.
	 *
	 * @return new {@link Builder} for {@link ResponseRule}
	 */
	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder for {@link ResponseRule}.
	 *
	 * @author MMORTIER, Equipe OTS
	 *
	 */
	public static class Builder {

		/** {@link Rule} rule. */
		protected Rule rule;

		/** {@link List<Map<String,String>>} unmatchedRuleDetail. */
		protected List<Map<String, String>> unmatchedRuleDetail;

		/** {@link List<Map<String,String>>} results. */
		protected List<Map<String, String>> results;

		/** {@link ResponseRule} parentResponse. */
		protected ResponseRule parentResponse;

		/** default protected Constructor. */
		protected Builder() {
			super();
		}

		/**
		 * Setter of rule.
		 *
		 * @param rule
		 *            {@link Rule} the rule to set.
		 * @return this {@link Builder}
		 */
		public Builder rule(final Rule rule) {
			this.rule = rule;
			return this;
		}

		/**
		 * Setter of unmatchedRuleDetail.
		 *
		 * @param unmatchedRuleDetail
		 *            {@link List<Map<String,String>>} the unmatchedRuleDetail to set.
		 * @return this {@link Builder}
		 */
		public Builder unmatchedRuleDetail(final List<Map<String, String>> unmatchedRuleDetail) {
			this.unmatchedRuleDetail = unmatchedRuleDetail;
			return this;
		}

		/**
		 * Setter of results.
		 *
		 * @param results
		 *            {@link List<Map<String,String>>} the results to set.
		 * @return this {@link Builder}
		 */
		public Builder results(final List<Map<String, String>> results) {
			this.results = results;
			return this;
		}

		/**
		 * Setter of parentResponse.
		 *
		 * @param parentResponse
		 *            {@link ResponseRule} the parentResponse to set.
		 * @return this {@link Builder}
		 */
		public Builder parentResponse(final ResponseRule parentResponse) {
			this.parentResponse = parentResponse;
			return this;
		}

		/**
		 * build new {@link ResponseRule}.
		 *
		 * @return new {@link ResponseRule} from this {@link Builder}
		 */
		public ResponseRule build() {
			return new ResponseRule(this);
		}

	}

	/**
	 * Getter of rule.
	 *
	 * @return {@link Rule} the rule
	 */
	public Rule getRule() {
		return rule;
	}

	/**
	 * Getter of unmatchedRuleDetail.
	 *
	 * @return {@link List<Map<String,String>>} the unmatchedRuleDetail
	 */
	public List<Map<String, String>> getUnmatchedRuleDetail() {
		return unmatchedRuleDetail;
	}

	/**
	 * Getter of results.
	 *
	 * @return {@link List<Map<String,String>>} the results
	 */
	public List<Map<String, String>> getResults() {
		return results;
	}

	/**
	 * Getter of parentResponse.
	 *
	 * @return {@link ResponseRule} the parentResponse
	 */
	public ResponseRule getParentResponse() {
		return parentResponse;
	}

	@Override
	public boolean equals(final Object obj) {
		if (!(obj instanceof ResponseRule)) {
			return false;
		}
		ResponseRule responserule = (ResponseRule) obj;
		return com.nordnet.common.valueObject.utils.Equals.TRUE.andEquals(getRule(), responserule.getRule())
				.andEquals(getUnmatchedRuleDetail(), responserule.getUnmatchedRuleDetail())
				.andEquals(getResults(), responserule.getResults())
				.andEquals(getParentResponse(), responserule.getParentResponse()).isEquals();
	}

	@Override
	public int hashCode() {
		return new com.nordnet.common.valueObject.utils.HashCode(null).append(getRule())
				.append(getUnmatchedRuleDetail()).append(getResults()).append(getParentResponse()).hashCode();
	}

	@Override
	public String toString() {
		try {
			return com.nordnet.common.valueObject.utils.JSon.toPrettyJson(this);
		} catch (com.fasterxml.jackson.core.JsonProcessingException jpe) {
			LoggerFactory.getLogger(ResponseRule.class).error("error with toString", jpe);
			return super.toString();
		}
	}

	@Override
	public int compareTo(final ResponseRule o) {
		return new com.nordnet.common.valueObject.utils.Compare(true, true).andCompare(getRule(), o.getRule())
				.andCompare(getParentResponse(), o.getParentResponse()).compare();
	}

	public Level getLevel() {
		return getUnmatchedRuleDetail().isEmpty() ? OK : getRule().getLevel();
	}

	public String toNagios() {
		return getRule().getIdentifier() + ";" + getLevel().ordinal() + ";" + getRule().getDescriptif() + "|nbResult="
				+ getResults().size()
				+ (getParentResponse() != null ? " total=" + getParentResponse().getResults().size() : "")
				+ (!getUnmatchedRuleDetail().isEmpty() ? "\n" + getUnmatchedRuleDetail() : "");
	}
}
