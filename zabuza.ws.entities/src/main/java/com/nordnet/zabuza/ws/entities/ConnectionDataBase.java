package com.nordnet.zabuza.ws.entities;

import org.slf4j.LoggerFactory;
import com.nordnet.common.valueObject.identifier.Identifier;

/**
 * ConnectionDataBase.
 *
 * this class is auto generated by the com.nordnet.common project : entities-maven-plugin,
 * do not edit this class directly, all change will be lost on next build ...
 *
 * @author MMORTIER, JLDANSOU
 *
 */
public class ConnectionDataBase implements Comparable<ConnectionDataBase> {

	/** {@link Identifier} identifier. */
	protected final Identifier identifier;

	/** {@link String} host. */
	protected final String host;

	/** {@link String} schema. */
	protected final String schema;

	/** {@link String} user. */
	protected final String user;

	/** {@link String} userPassword. */
	protected final String userPassword;

	/**
	 * default deprecated Constructor.
	 *
	 * @deprecated
	 */
	@Deprecated
	protected ConnectionDataBase() {
		identifier = null;
		host = null;
		schema = null;
		user = null;
		userPassword = null;
	}

	/**
	 * Constructor.
	 *
	 * @param builder the {@link Builder} to use.
	 */
	protected ConnectionDataBase(final Builder builder) {
		identifier = builder.identifier;
		host = builder.host;
		schema = builder.schema;
		user = builder.user;
		userPassword = builder.userPassword;
	
		// check parameters
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("identifier", identifier);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("host", host);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("schema", schema);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("user", user);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("userPassword", userPassword);
	}

	/**
	 * builder of {@link ConnectionDataBase}.
	 *
	 * @return new {@link Builder} for {@link ConnectionDataBase}
	 */
	public static Builder builder() {
		return new Builder();
	}
	/**
	 * Builder for {@link ConnectionDataBase}.
	 *
	 * @author MMORTIER, JLDANSOU
	 *
	 */
	public static class Builder {
		
		/** {@link Identifier} identifier. */
		protected Identifier identifier;

		/** {@link String} host. */
		protected String host;

		/** {@link String} schema. */
		protected String schema;

		/** {@link String} user. */
		protected String user;

		/** {@link String} userPassword. */
		protected String userPassword;

		/** default protected Constructor. */
		protected Builder() {
			super();
		}

		/**
		 * Setter of identifier.
		 *
		 * @param identifier
		 *			{@link Identifier} the identifier to set.
		 * @return this {@link Builder}
		 */
		public Builder identifier(final Identifier identifier) {
			this.identifier = identifier;
			return this;
		}

		/**
		 * Setter of host.
		 *
		 * @param host
		 *			{@link String} the host to set.
		 * @return this {@link Builder}
		 */
		public Builder host(final String host) {
			this.host = host;
			return this;
		}

		/**
		 * Setter of schema.
		 *
		 * @param schema
		 *			{@link String} the schema to set.
		 * @return this {@link Builder}
		 */
		public Builder schema(final String schema) {
			this.schema = schema;
			return this;
		}

		/**
		 * Setter of user.
		 *
		 * @param user
		 *			{@link String} the user to set.
		 * @return this {@link Builder}
		 */
		public Builder user(final String user) {
			this.user = user;
			return this;
		}

		/**
		 * Setter of userPassword.
		 *
		 * @param userPassword
		 *			{@link String} the userPassword to set.
		 * @return this {@link Builder}
		 */
		public Builder userPassword(final String userPassword) {
			this.userPassword = userPassword;
			return this;
		}

		/**
		 * build new {@link ConnectionDataBase}.
		 *
		 * @return new {@link ConnectionDataBase} from this {@link Builder}
		 */
		public ConnectionDataBase build() {
			return new ConnectionDataBase(this);
		}

	}
	/**
	 * Getter of identifier.
	 *
	 * @return {@link Identifier} the identifier
	 */
	public Identifier getIdentifier() {
		return identifier;
	}

	/**
	 * Getter of host.
	 *
	 * @return {@link String} the host
	 */
	public String getHost() {
		return host;
	}

	/**
	 * Getter of schema.
	 *
	 * @return {@link String} the schema
	 */
	public String getSchema() {
		return schema;
	}

	/**
	 * Getter of user.
	 *
	 * @return {@link String} the user
	 */
	public String getUser() {
		return user;
	}

	/**
	 * Getter of userPassword.
	 *
	 * @return {@link String} the userPassword
	 */
	public String getUserPassword() {
		return userPassword;
	}

	@Override
	public boolean equals(final Object obj) {
		if (!(obj instanceof ConnectionDataBase)) {
			return false;
		}
		ConnectionDataBase connectiondatabase = (ConnectionDataBase) obj;
		return com.nordnet.common.valueObject.utils.Equals.TRUE
			.andEquals(getIdentifier(), connectiondatabase.getIdentifier())
			.andEquals(getHost(), connectiondatabase.getHost())
			.andEquals(getSchema(), connectiondatabase.getSchema())
			.andEquals(getUser(), connectiondatabase.getUser())
			.andEquals(getUserPassword(), connectiondatabase.getUserPassword()).isEquals();
	}

	@Override
	public int hashCode() {
	return new com.nordnet.common.valueObject.utils.HashCode(null)
		.append(getIdentifier())
		.append(getHost())
		.append(getSchema())
		.append(getUser())
		.append(getUserPassword()).hashCode();
	}

	@Override
	public String toString() {
		try {
			return com.nordnet.common.valueObject.utils.JSon.toPrettyJson(this);
		} catch (com.fasterxml.jackson.core.JsonProcessingException jpe) {
			LoggerFactory.getLogger(ConnectionDataBase.class).error("error with toString", jpe);
			return super.toString();
		}
	}

	@Override
	public int compareTo(final ConnectionDataBase o) {
		return new com.nordnet.common.valueObject.utils.Compare(true, true)
		.andCompare(getIdentifier(), o.getIdentifier())
		.andCompare(getHost(), o.getHost())
		.andCompare(getSchema(), o.getSchema())
		.andCompare(getUser(), o.getUser())
		.andCompare(getUserPassword(), o.getUserPassword()).compare();
	}


}
