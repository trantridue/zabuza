package com.nordnet.zabuza.domain.model;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.EnumType.STRING;
import static javax.persistence.FetchType.EAGER;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.slf4j.LoggerFactory;

import com.nordnet.common.valueObject.identifier.Identifier;
import com.nordnet.zabuza.domain.model.constants.Level;

/**
 * Rule.
 *
 * this class is auto generated by the com.nordnet.common project : entities-maven-plugin, do not edit this class
 * directly, all change will be lost on next build ...
 *
 * @author MMORTIER, Equipe OTS
 *
 */
@Entity
@Table(name = "rule")
public class Rule implements Comparable<Rule> {

	/** identifier. */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", columnDefinition = "int(11)", nullable = false)
	protected Long id;

	/** {@link String} identifier. */
	@Embedded
	protected final Identifier identifier;

	/** {@link ConnectionDataBase} dataBase. */
	@ManyToOne(fetch = EAGER, cascade = ALL)
	@JoinColumn(name = "data_base_idFK", nullable = true)
	protected final ConnectionDataBase dataBase;

	/** {@link Query} query. */
	@ManyToOne(fetch = EAGER, cascade = ALL)
	@JoinColumn(name = "query_idFK", nullable = true)
	protected final Query query;

	/** {@link Level} level. */
	@Column(name = "level", columnDefinition = "enum('OK','WARNING','CRITICAL','UNKNOWN')", nullable = false)
	@Enumerated(STRING)
	protected final Level level;

	/** {@link String} descriptif. */
	protected final String descriptif;

	/** {@link Rule} parent. */
	@ManyToOne(fetch = EAGER, cascade = ALL)
	@JoinColumn(name = "parent_rule_idFK", nullable = true)
	protected final Rule parent;

	/**
	 * default deprecated Constructor.
	 *
	 * @deprecated
	 */
	@Deprecated
	protected Rule() {
		identifier = null;
		dataBase = null;
		query = null;
		level = null;
		descriptif = null;
		parent = null;
	}

	/**
	 * Constructor.
	 *
	 * @param builder
	 *            the {@link Builder} to use.
	 */
	protected Rule(final Builder builder) {
		identifier = builder.identifier;
		dataBase = builder.dataBase;
		query = builder.query;
		level = builder.level;
		descriptif = builder.descriptif;
		parent = builder.parent;

		// check parameters
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("identifier", identifier);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("dataBase", dataBase);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("query", query);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("level", level);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("descriptif", descriptif);
	}

	/**
	 * builder of {@link Rule}.
	 *
	 * @return new {@link Builder} for {@link Rule}
	 */
	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder for {@link Rule}.
	 *
	 * @author MMORTIER, Equipe OTS
	 *
	 */
	public static class Builder {

		/** {@link String} identifier. */
		protected Identifier identifier;

		/** {@link ConnectionDataBase} dataBase. */
		protected ConnectionDataBase dataBase;

		/** {@link Query} query. */
		protected Query query;

		/** {@link Level} level. */
		protected Level level;

		/** {@link String} descriptif. */
		protected String descriptif;

		/** {@link Rule} parent. */
		protected Rule parent;

		/** default protected Constructor. */
		protected Builder() {
			super();
		}

		/**
		 * Setter of identifier.
		 *
		 * @param identifier
		 *            {@link String} the identifier to set.
		 * @return this {@link Builder}
		 */
		public Builder identifier(final Identifier identifier) {
			this.identifier = identifier;
			return this;
		}

		/**
		 * Setter of dataBase.
		 *
		 * @param dataBase
		 *            {@link ConnectionDataBase} the dataBase to set.
		 * @return this {@link Builder}
		 */
		public Builder dataBase(final ConnectionDataBase dataBase) {
			this.dataBase = dataBase;
			return this;
		}

		/**
		 * Setter of query.
		 *
		 * @param query
		 *            {@link Query} the query to set.
		 * @return this {@link Builder}
		 */
		public Builder query(final Query query) {
			this.query = query;
			return this;
		}

		/**
		 * Setter of level.
		 *
		 * @param level
		 *            {@link Level} the level to set.
		 * @return this {@link Builder}
		 */
		public Builder level(final Level level) {
			this.level = level;
			return this;
		}

		/**
		 * Setter of descriptif.
		 *
		 * @param descriptif
		 *            {@link String} the descriptif to set.
		 * @return this {@link Builder}
		 */
		public Builder descriptif(final String descriptif) {
			this.descriptif = descriptif;
			return this;
		}

		/**
		 * Setter of parent.
		 *
		 * @param parent
		 *            {@link Rule} the parent to set.
		 * @return this {@link Builder}
		 */
		public Builder parent(final Rule parent) {
			this.parent = parent;
			return this;
		}

		/**
		 * build new {@link Rule}.
		 *
		 * @return new {@link Rule} from this {@link Builder}
		 */
		public Rule build() {
			return new Rule(this);
		}

	}

	/**
	 * Getter of identifier.
	 *
	 * @return {@link String} the identifier
	 */
	public Identifier getIdentifier() {
		return identifier;
	}

	/**
	 * Getter of dataBase.
	 *
	 * @return {@link ConnectionDataBase} the dataBase
	 */
	public ConnectionDataBase getDataBase() {
		return dataBase;
	}

	/**
	 * Getter of query.
	 *
	 * @return {@link Query} the query
	 */
	public Query getQuery() {
		return query;
	}

	/**
	 * Getter of level.
	 *
	 * @return {@link Level} the level
	 */
	public Level getLevel() {
		return level;
	}

	/**
	 * Getter of descriptif.
	 *
	 * @return {@link String} the descriptif
	 */
	public String getDescriptif() {
		return descriptif;
	}

	/**
	 * Getter of parent.
	 *
	 * @return {@link Rule} the parent
	 */
	public Rule getParent() {
		return parent;
	}

	@Override
	public boolean equals(final Object obj) {
		if (!(obj instanceof Rule)) {
			return false;
		}
		Rule rule = (Rule) obj;
		return com.nordnet.common.valueObject.utils.Equals.TRUE.andEquals(getIdentifier(), rule.getIdentifier())
				.andEquals(getDataBase(), rule.getDataBase()).andEquals(getQuery(), rule.getQuery())
				.andEquals(getLevel(), rule.getLevel()).andEquals(getDescriptif(), rule.getDescriptif())
				.andEquals(getParent(), rule.getParent()).isEquals();
	}

	@Override
	public int hashCode() {
		return new com.nordnet.common.valueObject.utils.HashCode(null).append(getIdentifier()).append(getDataBase())
				.append(getQuery()).append(getLevel()).append(getDescriptif()).append(getParent()).hashCode();
	}

	@Override
	public String toString() {
		try {
			return com.nordnet.common.valueObject.utils.JSon.toPrettyJson(this);
		} catch (com.fasterxml.jackson.core.JsonProcessingException jpe) {
			LoggerFactory.getLogger(Rule.class).error("error with toString", jpe);
			return super.toString();
		}
	}

	@Override
	public int compareTo(final Rule o) {
		return new com.nordnet.common.valueObject.utils.Compare(true, true)
				.andCompare(getIdentifier(), o.getIdentifier()).andCompare(getDataBase(), o.getDataBase())
				.andCompare(getQuery(), o.getQuery()).andCompare(getLevel(), o.getLevel())
				.andCompare(getDescriptif(), o.getDescriptif()).andCompare(getParent(), o.getParent()).compare();
	}

}
