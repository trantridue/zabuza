package com.nordnet.zabuza.ws.entities;

import org.slf4j.LoggerFactory;
import com.nordnet.common.valueObject.identifier.Identifier;
import com.nordnet.zabuza.ws.entities.constants.Level;

/**
 * Rule.
 *
 * this class is auto generated by the com.nordnet.common project : entities-maven-plugin,
 * do not edit this class directly, all change will be lost on next build ...
 *
 * @author MMORTIER, JLDANSOU
 *
 */
public class Rule implements Comparable<Rule> {

	/** {@link Identifier} connectionDataBase. */
	protected final Identifier connectionDataBase;

	/** {@link String} descriptif. */
	protected final String descriptif;

	/** {@link Identifier} identifier. */
	protected final Identifier identifier;

	/** {@link Level} level. */
	protected final Level level;

	/** {@link Identifier} parent. */
	protected final Identifier parent;

	/** {@link Identifier} query. */
	protected final Identifier query;

	/**
	 * default deprecated Constructor.
	 *
	 * @deprecated
	 */
	@Deprecated
	protected Rule() {
		connectionDataBase = null;
		descriptif = null;
		identifier = null;
		level = null;
		parent = null;
		query = null;
	}

	/**
	 * Constructor.
	 *
	 * @param builder the {@link Builder} to use.
	 */
	protected Rule(final Builder builder) {
		connectionDataBase = builder.connectionDataBase;
		descriptif = builder.descriptif;
		identifier = builder.identifier;
		level = builder.level;
		parent = builder.parent;
		query = builder.query;
	
		// check parameters
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("connectionDataBase", connectionDataBase);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("descriptif", descriptif);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("identifier", identifier);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("level", level);
		com.nordnet.common.valueObject.utils.Null.checkNotNullOrEmpty("query", query);
	}

	/**
	 * builder of {@link Rule}.
	 *
	 * @return new {@link Builder} for {@link Rule}
	 */
	public static Builder builder() {
		return new Builder();
	}
	/**
	 * Builder for {@link Rule}.
	 *
	 * @author MMORTIER, JLDANSOU
	 *
	 */
	public static class Builder {
		
		/** {@link Identifier} connectionDataBase. */
		protected Identifier connectionDataBase;

		/** {@link String} descriptif. */
		protected String descriptif;

		/** {@link Identifier} identifier. */
		protected Identifier identifier;

		/** {@link Level} level. */
		protected Level level;

		/** {@link Identifier} parent. */
		protected Identifier parent;

		/** {@link Identifier} query. */
		protected Identifier query;

		/** default protected Constructor. */
		protected Builder() {
			super();
		}

		/**
		 * Setter of connectionDataBase.
		 *
		 * @param connectionDataBase
		 *			{@link Identifier} the connectionDataBase to set.
		 * @return this {@link Builder}
		 */
		public Builder connectionDataBase(final Identifier connectionDataBase) {
			this.connectionDataBase = connectionDataBase;
			return this;
		}

		/**
		 * Setter of descriptif.
		 *
		 * @param descriptif
		 *			{@link String} the descriptif to set.
		 * @return this {@link Builder}
		 */
		public Builder descriptif(final String descriptif) {
			this.descriptif = descriptif;
			return this;
		}

		/**
		 * Setter of identifier.
		 *
		 * @param identifier
		 *			{@link Identifier} the identifier to set.
		 * @return this {@link Builder}
		 */
		public Builder identifier(final Identifier identifier) {
			this.identifier = identifier;
			return this;
		}

		/**
		 * Setter of level.
		 *
		 * @param level
		 *			{@link Level} the level to set.
		 * @return this {@link Builder}
		 */
		public Builder level(final Level level) {
			this.level = level;
			return this;
		}

		/**
		 * Setter of parent.
		 *
		 * @param parent
		 *			{@link Identifier} the parent to set.
		 * @return this {@link Builder}
		 */
		public Builder parent(final Identifier parent) {
			this.parent = parent;
			return this;
		}

		/**
		 * Setter of query.
		 *
		 * @param query
		 *			{@link Identifier} the query to set.
		 * @return this {@link Builder}
		 */
		public Builder query(final Identifier query) {
			this.query = query;
			return this;
		}

		/**
		 * build new {@link Rule}.
		 *
		 * @return new {@link Rule} from this {@link Builder}
		 */
		public Rule build() {
			return new Rule(this);
		}

	}
	/**
	 * Getter of connectionDataBase.
	 *
	 * @return {@link Identifier} the connectionDataBase
	 */
	public Identifier getConnectionDataBase() {
		return connectionDataBase;
	}

	/**
	 * Getter of descriptif.
	 *
	 * @return {@link String} the descriptif
	 */
	public String getDescriptif() {
		return descriptif;
	}

	/**
	 * Getter of identifier.
	 *
	 * @return {@link Identifier} the identifier
	 */
	public Identifier getIdentifier() {
		return identifier;
	}

	/**
	 * Getter of level.
	 *
	 * @return {@link Level} the level
	 */
	public Level getLevel() {
		return level;
	}

	/**
	 * Getter of parent.
	 *
	 * @return {@link Identifier} the parent
	 */
	public Identifier getParent() {
		return parent;
	}

	/**
	 * Getter of query.
	 *
	 * @return {@link Identifier} the query
	 */
	public Identifier getQuery() {
		return query;
	}

	@Override
	public boolean equals(final Object obj) {
		if (!(obj instanceof Rule)) {
			return false;
		}
		Rule rule = (Rule) obj;
		return com.nordnet.common.valueObject.utils.Equals.TRUE
			.andEquals(getConnectionDataBase(), rule.getConnectionDataBase())
			.andEquals(getDescriptif(), rule.getDescriptif())
			.andEquals(getIdentifier(), rule.getIdentifier())
			.andEquals(getLevel(), rule.getLevel())
			.andEquals(getParent(), rule.getParent())
			.andEquals(getQuery(), rule.getQuery()).isEquals();
	}

	@Override
	public int hashCode() {
	return new com.nordnet.common.valueObject.utils.HashCode(null)
		.append(getConnectionDataBase())
		.append(getDescriptif())
		.append(getIdentifier())
		.append(getLevel())
		.append(getParent())
		.append(getQuery()).hashCode();
	}

	@Override
	public String toString() {
		try {
			return com.nordnet.common.valueObject.utils.JSon.toPrettyJson(this);
		} catch (com.fasterxml.jackson.core.JsonProcessingException jpe) {
			LoggerFactory.getLogger(Rule.class).error("error with toString", jpe);
			return super.toString();
		}
	}

	@Override
	public int compareTo(final Rule o) {
		return new com.nordnet.common.valueObject.utils.Compare(true, true)
		.andCompare(getConnectionDataBase(), o.getConnectionDataBase())
		.andCompare(getDescriptif(), o.getDescriptif())
		.andCompare(getIdentifier(), o.getIdentifier())
		.andCompare(getLevel(), o.getLevel())
		.andCompare(getParent(), o.getParent())
		.andCompare(getQuery(), o.getQuery()).compare();
	}


}
